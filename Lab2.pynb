{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNqOtz/PV51nFI3qG2VAVcz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sushila-Phogat/CE888/blob/master/Lab2.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Er6sMYNw4OW-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "import math\n",
        "import random\n",
        "from array import *"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x_ZgR5Oq5mWK",
        "colab_type": "code",
        "outputId": "bd0aac10-b0b5-4013-9158-644b390fac9d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Load the data\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/albanda/CE888/master/lab2%20-%20bootstrap/customers.csv')\n",
        "data = df.values.T[1]\n",
        "data.shape[0]"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WQNNwwYw5_2N",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Checking the notes from the lecture, create here your own bootstrap function:\n",
        "# 1. Create an array of samples of shape (n_iterations, sample_size)\n",
        "# 2. Calculate and save the mean of the array (this is \"data_mean\" that is returned by the function)\n",
        "# 3. In each iteration:\n",
        "# 3.1 Get the data corresponding to that iteration (new_samples[iteration, :])\n",
        "# 3.2 Calculate the mean of the iteration data and store it\n",
        "# (At this point you should have an array of n_iterations values)\n",
        "# 4. Calculate the lower and upper bounds for a 95% CI (hint: check the percentile function on Numpy)\n",
        "# 5. Return data_mean, and the lower and upper bounds of your interval\n",
        "\n",
        "meant=[]\n",
        "\n",
        "def boostrap_mean(data, size, n_iterations):\n",
        "\tdata=random.choices(data,k=size)\n",
        "\tfor i in range(n_iterations):\n",
        "\t\tdata1=pd.Series(data)\n",
        "\t\tmean_val = data1.mean()\n",
        "\t\tmeant.append(mean_val)\n",
        "\tlower=np.percentile(meant,5)\n",
        "\tupper=np.percentile(meant,95)\n",
        "\tdata_mean=np.mean(meant)\n",
        "\treturn data_mean, lower, upper\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gPiWIG4A5_-1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "outputId": "cbde135e-0f5d-416c-f9cb-28e8ce85a420"
      },
      "source": [
        "\n",
        "# Call your bootstrap function and plot the results\n",
        "\n",
        "boots = []\n",
        "for i in range(100, 100000, 1000):\n",
        "    boot = boostrap_mean(data, data.shape[0], i)\n",
        "    boots.append([i, boot[0], \"mean\"])\n",
        "    boots.append([i, boot[1], \"lower\"])\n",
        "    boots.append([i, boot[2], \"upper\"])\n",
        "\n",
        "df_boot = pd.DataFrame(boots, columns=['Boostrap Iterations', 'Mean', \"Value\"])\n",
        "sns_plot = sns.lmplot(df_boot.columns[0], df_boot.columns[1], data=df_boot, fit_reg=False, hue=\"Value\")\n",
        "\n",
        "sns_plot.axes[0, 0].set_ylim(0,)\n",
        "sns_plot.axes[0, 0].set_xlim(0, 100000)\n",
        "\n",
        "#sns_plot.savefig(\"bootstrap_confidence.png\", bbox_inches='tight')\n",
        "#sns_plot.savefig(\"bootstrap_confidence.pdf\", bbox_inches='tight')"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0, 100000)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZ8AAAFgCAYAAABkJnRYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3deZwkZ33f8c+vjzl3Zs9ZSbsrsStL\nIAsBAtZCAqQoCGxxWDg2MRActIZE5HIgCRAQDhHwsqIgOTYEbEvByoJNZBvMocgxsiIktA5CYnUg\naUH3uSt2d/ae2bl6un/5o6p7ama7enpmuqu6e75vXsPWVF9PdY3qV8/z/J7nMXdHREQkSZm0CyAi\nIsuPgo+IiCROwUdERBKn4CMiIolT8BERkcTl0i5APS699FL/3ve+l3YxREQWytIuQKtqi5rPgQMH\n0i6CiIg0UFsEHxER6SwKPiIikjgFHxERSZyCj4iIJE7BR0REEtcWqdZp2LF7B9t3bWfP6B76c/1g\ncLxwvOnbG1dsZNvLt3HhpgvT/gpERJrG2mFW661bt/rOnTsT+7wdu3dw9T1Xk8/mKRQL7D2+F8dZ\n3bWaI1NHmra9oX8DuWyOQrHAla+7UgFIpP1pnE8MNbtVsX3XdvLZPL25Xg5NHCJjGbKZLIemmrt9\ncOIgvble8tk823dtT/trEBFpGgWfKvaM7qEn2wNAoVTAMDJkKHmpqduFUgGAnmwPe0b3pPkViIg0\nlYJPFRtXbGSiOAFAPpPHcUqUyFimqdv5TB6AieIEG1dsTPMrEBFpKgWfKra9fBuFYoHx6XHW9Kyh\n5CWKpSJrupq7vbZnLePT4xSKBba9fFvaX4OISNMo4SCGst1EpAGUcBBDqdYxLtx0oQKAiEiTKPiI\ntLhm18I3rtjI1pO2snPfTvaM7mmJ2neSLQ+tcLzLkZrdRFpYs8ecbejfwFRpigPjB1jXu441PWuY\nKE6kOtYsyXF2CYytU7NbDCUciLSwZo85OzhxkJGpEcys8m/aY82SHGensXXpUfARaWHNHnNWKBUo\nlApkyVbGmUG6Y82SHGensXXpaVqfj5ndCLwD2O/u54T7rgV+FZgCngJ+292PNKsMIu1u44qNDI8P\nB3fnmTzTpWkcr4wPW+p2eWzZVGmKrkxX5XPTHGvW7GOudvyLPd64vin1I82vmTWf7cClc/bdBpzj\n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\n",
            "text/plain": [
              "<Figure size 425.125x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "13si7djy6AL8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}